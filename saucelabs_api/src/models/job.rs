/*
 * Sauce Labs REST API
 *
 * This is a REST API documentation provided by Sauce Labs
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@saucelabs.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Job {
    #[serde(rename = "assigned_tunnel_id", skip_serializing_if = "Option::is_none")]
    pub assigned_tunnel_id: Option<String>,
    #[serde(rename = "automation_backend", skip_serializing_if = "Option::is_none")]
    pub automation_backend: Option<String>,
    #[serde(rename = "base_config", skip_serializing_if = "Option::is_none")]
    pub base_config: Option<Box<crate::models::BaseConfig>>,
    #[serde(rename = "breakpointed", skip_serializing_if = "Option::is_none")]
    pub breakpointed: Option<String>,
    #[serde(rename = "browser", skip_serializing_if = "Option::is_none")]
    pub browser: Option<String>,
    #[serde(rename = "browser_short_version", skip_serializing_if = "Option::is_none")]
    pub browser_short_version: Option<String>,
    #[serde(rename = "browser_version", skip_serializing_if = "Option::is_none")]
    pub browser_version: Option<String>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<String>,
    #[serde(rename = "collects_automator_log", skip_serializing_if = "Option::is_none")]
    pub collects_automator_log: Option<bool>,
    #[serde(rename = "command_counts", skip_serializing_if = "Option::is_none")]
    pub command_counts: Option<Box<crate::models::CommandCountStats>>,
    #[serde(rename = "commands_not_successful", skip_serializing_if = "Option::is_none")]
    pub commands_not_successful: Option<i32>,
    #[serde(rename = "consolidated_status", skip_serializing_if = "Option::is_none")]
    pub consolidated_status: Option<ConsolidatedStatus>,
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    #[serde(rename = "custom-data", skip_serializing_if = "Option::is_none")]
    pub custom_data: Option<String>,
    #[serde(rename = "deletion_time", skip_serializing_if = "Option::is_none")]
    pub deletion_time: Option<String>,
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "log_url", skip_serializing_if = "Option::is_none")]
    pub log_url: Option<String>,
    /// Is manual testing
    #[serde(rename = "manual", skip_serializing_if = "Option::is_none")]
    pub manual: Option<bool>,
    #[serde(rename = "modification_time", skip_serializing_if = "Option::is_none")]
    pub modification_time: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "os", skip_serializing_if = "Option::is_none")]
    pub os: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "passed", skip_serializing_if = "Option::is_none")]
    pub passed: Option<bool>,
    #[serde(rename = "proxied", skip_serializing_if = "Option::is_none")]
    pub proxied: Option<bool>,
    #[serde(rename = "proxy_host", skip_serializing_if = "Option::is_none")]
    pub proxy_host: Option<bool>,
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<Public>,
    #[serde(rename = "record_screenshots", skip_serializing_if = "Option::is_none")]
    pub record_screenshots: Option<bool>,
    #[serde(rename = "record_video", skip_serializing_if = "Option::is_none")]
    pub record_video: Option<bool>,
    #[serde(rename = "selenium_version", skip_serializing_if = "Option::is_none")]
    pub selenium_version: Option<String>,
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "video_secret", skip_serializing_if = "Option::is_none")]
    pub video_secret: Option<String>,
    #[serde(rename = "video_url", skip_serializing_if = "Option::is_none")]
    pub video_url: Option<String>,
}

impl Job {
    pub fn new(id: String) -> Job {
        Job {
            assigned_tunnel_id: None,
            automation_backend: None,
            base_config: None,
            breakpointed: None,
            browser: None,
            browser_short_version: None,
            browser_version: None,
            build: None,
            collects_automator_log: None,
            command_counts: None,
            commands_not_successful: None,
            consolidated_status: None,
            creation_time: None,
            custom_data: None,
            deletion_time: None,
            end_time: None,
            id,
            log_url: None,
            manual: None,
            modification_time: None,
            name: None,
            os: None,
            owner: None,
            passed: None,
            proxied: None,
            proxy_host: None,
            public: None,
            record_screenshots: None,
            record_video: None,
            selenium_version: None,
            start_time: None,
            status: None,
            tags: None,
            video_secret: None,
            video_url: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConsolidatedStatus {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "passed")]
    Passed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "complete")]
    Complete,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Public {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "public restricted")]
    PublicRestricted,
    #[serde(rename = "share")]
    Share,
    #[serde(rename = "team")]
    Team,
}

