/*
 * Sauce Labs REST API
 *
 * This is a REST API documentation provided by Sauce Labs
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@saucelabs.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Tunnel {
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<i64>,
    #[serde(rename = "direct_domains", skip_serializing_if = "Option::is_none")]
    pub direct_domains: Option<Vec<String>>,
    #[serde(rename = "domain_names", skip_serializing_if = "Option::is_none")]
    pub domain_names: Option<Vec<String>>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "last_connected", skip_serializing_if = "Option::is_none")]
    pub last_connected: Option<i64>,
    #[serde(rename = "launch_time", skip_serializing_if = "Option::is_none")]
    pub launch_time: Option<i64>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<crate::models::TunnelMetaData>>,
    #[serde(rename = "no_proxy_caching", skip_serializing_if = "Option::is_none")]
    pub no_proxy_caching: Option<bool>,
    #[serde(rename = "no_ssl_bump_domains", skip_serializing_if = "Option::is_none")]
    pub no_ssl_bump_domains: Option<Vec<String>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "shared_tunnel", skip_serializing_if = "Option::is_none")]
    pub shared_tunnel: Option<bool>,
    #[serde(rename = "shutdown_time", skip_serializing_if = "Option::is_none")]
    pub shutdown_time: Option<i64>,
    #[serde(rename = "ssh_port", skip_serializing_if = "Option::is_none")]
    pub ssh_port: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "tunnel_identifier", skip_serializing_if = "Option::is_none")]
    pub tunnel_identifier: Option<String>,
    #[serde(rename = "use_caching_proxy", skip_serializing_if = "Option::is_none")]
    pub use_caching_proxy: Option<bool>,
    #[serde(rename = "use_kgp", skip_serializing_if = "Option::is_none")]
    pub use_kgp: Option<bool>,
    #[serde(rename = "user_shutdown", skip_serializing_if = "Option::is_none")]
    pub user_shutdown: Option<bool>,
    #[serde(rename = "vm_version", skip_serializing_if = "Option::is_none")]
    pub vm_version: Option<String>,
}

impl Tunnel {
    pub fn new(id: String) -> Tunnel {
        Tunnel {
            creation_time: None,
            direct_domains: None,
            domain_names: None,
            host: None,
            id,
            last_connected: None,
            launch_time: None,
            metadata: None,
            no_proxy_caching: None,
            no_ssl_bump_domains: None,
            owner: None,
            shared_tunnel: None,
            shutdown_time: None,
            ssh_port: None,
            status: None,
            tunnel_identifier: None,
            use_caching_proxy: None,
            use_kgp: None,
            user_shutdown: None,
            vm_version: None,
        }
    }
}


