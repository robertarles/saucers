/*
 * Sauce Labs REST API
 *
 * This is a REST API documentation provided by Sauce Labs
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@saucelabs.com
 * Generated by: https://openapi-generator.tech
 */

/// User : User



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "access_key", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<String>,
    #[serde(rename = "ancestor_allows_subaccounts", skip_serializing_if = "Option::is_none")]
    pub ancestor_allows_subaccounts: Option<bool>,
    #[serde(rename = "ancestor_concurrency_limit", skip_serializing_if = "Option::is_none")]
    pub ancestor_concurrency_limit: Option<Box<crate::models::ConcurrencyLimit>>,
    #[serde(rename = "can_run_manual", skip_serializing_if = "Option::is_none")]
    pub can_run_manual: Option<bool>,
    #[serde(rename = "concurrency_limit", skip_serializing_if = "Option::is_none")]
    pub concurrency_limit: Option<Box<crate::models::ConcurrencyLimit>>,
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "entity_type", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<String>,
    /// First name of the Sauce user.
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "is_admin", skip_serializing_if = "Option::is_none")]
    pub is_admin: Option<String>,
    #[serde(rename = "is_sso", skip_serializing_if = "Option::is_none")]
    pub is_sso: Option<bool>,
    /// Last name of the Sauce user.
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "manual_minutes", skip_serializing_if = "Option::is_none")]
    pub manual_minutes: Option<i32>,
    #[serde(rename = "minutes", skip_serializing_if = "Option::is_none")]
    pub minutes: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    #[serde(rename = "prevent_emails", skip_serializing_if = "Option::is_none")]
    pub prevent_emails: Option<Vec<PreventEmails>>,
    #[serde(rename = "subscribed", skip_serializing_if = "Option::is_none")]
    pub subscribed: Option<bool>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "user_type", skip_serializing_if = "Option::is_none")]
    pub user_type: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "verified", skip_serializing_if = "Option::is_none")]
    pub verified: Option<bool>,
    #[serde(rename = "vm_lockdown", skip_serializing_if = "Option::is_none")]
    pub vm_lockdown: Option<bool>,
}

impl User {
    /// User
    pub fn new() -> User {
        User {
            access_key: None,
            ancestor_allows_subaccounts: None,
            ancestor_concurrency_limit: None,
            can_run_manual: None,
            concurrency_limit: None,
            creation_time: None,
            domain: None,
            email: None,
            entity_type: None,
            first_name: None,
            id: None,
            is_admin: None,
            is_sso: None,
            last_name: None,
            manual_minutes: None,
            minutes: None,
            name: None,
            parent: None,
            prevent_emails: None,
            subscribed: None,
            title: None,
            user_type: None,
            username: None,
            verified: None,
            vm_lockdown: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PreventEmails {
    #[serde(rename = "marketing")]
    Marketing,
}

